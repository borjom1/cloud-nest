/*
 * This file is generated by jOOQ.
 */
package com.cloud.nest.db.fm.tables;


import com.cloud.nest.db.fm.Fm;
import com.cloud.nest.db.fm.Indexes;
import com.cloud.nest.db.fm.Keys;
import com.cloud.nest.db.fm.tables.records.FileRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class File extends TableImpl<FileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fm.file</code>
     */
    public static final File FILE = new File();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileRecord> getRecordType() {
        return FileRecord.class;
    }

    /**
     * The column <code>fm.file.id</code>.
     */
    public final TableField<FileRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>fm.file.s3_object_key</code>.
     */
    public final TableField<FileRecord, String> S3_OBJECT_KEY = createField(DSL.name("s3_object_key"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>fm.file.filename</code>.
     */
    public final TableField<FileRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>fm.file.ext</code>.
     */
    public final TableField<FileRecord, String> EXT = createField(DSL.name("ext"), SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>fm.file.size</code>.
     */
    public final TableField<FileRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>fm.file.uploaded_by</code>.
     */
    public final TableField<FileRecord, Long> UPLOADED_BY = createField(DSL.name("uploaded_by"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>fm.file.deleted</code>.
     */
    public final TableField<FileRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>fm.file.created</code>.
     */
    public final TableField<FileRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>fm.file.updated</code>.
     */
    public final TableField<FileRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>fm.file.content_type</code>.
     */
    public final TableField<FileRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'application/octet-stream'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>fm.file.placed_to_bin</code>.
     */
    public final TableField<FileRecord, LocalDateTime> PLACED_TO_BIN = createField(DSL.name("placed_to_bin"), SQLDataType.LOCALDATETIME(6), this, "");

    private File(Name alias, Table<FileRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private File(Name alias, Table<FileRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fm.file</code> table reference
     */
    public File(String alias) {
        this(DSL.name(alias), FILE);
    }

    /**
     * Create an aliased <code>fm.file</code> table reference
     */
    public File(Name alias) {
        this(alias, FILE);
    }

    /**
     * Create a <code>fm.file</code> table reference
     */
    public File() {
        this(DSL.name("file"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fm.FM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILE_DELETED_IDX, Indexes.FILE_PLACED_TO_BIN_IDX, Indexes.FILE_S3_OBJECT_KEY_IDX);
    }

    @Override
    public Identity<FileRecord, Long> getIdentity() {
        return (Identity<FileRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FileRecord> getPrimaryKey() {
        return Keys.FILE_ID_PKEY;
    }

    @Override
    public List<UniqueKey<FileRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FILE_S3_OBJECT_KEY_KEY);
    }

    @Override
    public File as(String alias) {
        return new File(DSL.name(alias), this);
    }

    @Override
    public File as(Name alias) {
        return new File(alias, this);
    }

    @Override
    public File as(Table<?> alias) {
        return new File(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(String name) {
        return new File(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(Name name) {
        return new File(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(Table<?> name) {
        return new File(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File where(Condition condition) {
        return new File(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public File where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public File where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public File where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public File where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
