/*
 * This file is generated by jOOQ.
 */
package com.cloud.nest.db.fm.tables;


import com.cloud.nest.db.fm.Fm;
import com.cloud.nest.db.fm.Indexes;
import com.cloud.nest.db.fm.Keys;
import com.cloud.nest.db.fm.tables.records.ReportRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Report extends TableImpl<ReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fm.report</code>
     */
    public static final Report REPORT = new Report();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportRecord> getRecordType() {
        return ReportRecord.class;
    }

    /**
     * The column <code>fm.report.id</code>.
     */
    public final TableField<ReportRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>fm.report.user_id</code>.
     */
    public final TableField<ReportRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>fm.report.period_start</code>.
     */
    public final TableField<ReportRecord, LocalDateTime> PERIOD_START = createField(DSL.name("period_start"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>fm.report.period_end</code>.
     */
    public final TableField<ReportRecord, LocalDateTime> PERIOD_END = createField(DSL.name("period_end"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>fm.report.downloaded_bytes</code>.
     */
    public final TableField<ReportRecord, Long> DOWNLOADED_BYTES = createField(DSL.name("downloaded_bytes"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>fm.report.uploaded_bytes</code>.
     */
    public final TableField<ReportRecord, Long> UPLOADED_BYTES = createField(DSL.name("uploaded_bytes"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>fm.report.created</code>.
     */
    public final TableField<ReportRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Report(Name alias, Table<ReportRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Report(Name alias, Table<ReportRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fm.report</code> table reference
     */
    public Report(String alias) {
        this(DSL.name(alias), REPORT);
    }

    /**
     * Create an aliased <code>fm.report</code> table reference
     */
    public Report(Name alias) {
        this(alias, REPORT);
    }

    /**
     * Create a <code>fm.report</code> table reference
     */
    public Report() {
        this(DSL.name("report"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fm.FM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REPORT_PERIOD_END_IDX, Indexes.REPORT_PERIOD_START_IDX, Indexes.REPORT_USER_ID_IDX);
    }

    @Override
    public UniqueKey<ReportRecord> getPrimaryKey() {
        return Keys.REPORT_ID_PKEY;
    }

    @Override
    public Report as(String alias) {
        return new Report(DSL.name(alias), this);
    }

    @Override
    public Report as(Name alias) {
        return new Report(alias, this);
    }

    @Override
    public Report as(Table<?> alias) {
        return new Report(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Report rename(String name) {
        return new Report(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Report rename(Name name) {
        return new Report(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Report rename(Table<?> name) {
        return new Report(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report where(Condition condition) {
        return new Report(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Report where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Report where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Report where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Report where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Report whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
