/*
 * This file is generated by jOOQ.
 */
package com.cloud.nest.db.fm.tables;


import com.cloud.nest.db.fm.Fm;
import com.cloud.nest.db.fm.Indexes;
import com.cloud.nest.db.fm.Keys;
import com.cloud.nest.db.fm.tables.records.ReportJobRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReportJob extends TableImpl<ReportJobRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fm.report_job</code>
     */
    public static final ReportJob REPORT_JOB = new ReportJob();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportJobRecord> getRecordType() {
        return ReportJobRecord.class;
    }

    /**
     * The column <code>fm.report_job.id</code>.
     */
    public final TableField<ReportJobRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>fm.report_job.type</code>.
     */
    public final TableField<ReportJobRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>fm.report_job.last_reported_user_id</code>.
     */
    public final TableField<ReportJobRecord, Long> LAST_REPORTED_USER_ID = createField(DSL.name("last_reported_user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>fm.report_job.created</code>.
     */
    public final TableField<ReportJobRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>fm.report_job.updated</code>.
     */
    public final TableField<ReportJobRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>fm.report_job.completed</code>.
     */
    public final TableField<ReportJobRecord, Boolean> COMPLETED = createField(DSL.name("completed"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private ReportJob(Name alias, Table<ReportJobRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ReportJob(Name alias, Table<ReportJobRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fm.report_job</code> table reference
     */
    public ReportJob(String alias) {
        this(DSL.name(alias), REPORT_JOB);
    }

    /**
     * Create an aliased <code>fm.report_job</code> table reference
     */
    public ReportJob(Name alias) {
        this(alias, REPORT_JOB);
    }

    /**
     * Create a <code>fm.report_job</code> table reference
     */
    public ReportJob() {
        this(DSL.name("report_job"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fm.FM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REPORT_JOB_TYPE_CREATED_IDX);
    }

    @Override
    public Identity<ReportJobRecord, Long> getIdentity() {
        return (Identity<ReportJobRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReportJobRecord> getPrimaryKey() {
        return Keys.REPORT_JOB_ID_PKEY;
    }

    @Override
    public ReportJob as(String alias) {
        return new ReportJob(DSL.name(alias), this);
    }

    @Override
    public ReportJob as(Name alias) {
        return new ReportJob(alias, this);
    }

    @Override
    public ReportJob as(Table<?> alias) {
        return new ReportJob(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportJob rename(String name) {
        return new ReportJob(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportJob rename(Name name) {
        return new ReportJob(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportJob rename(Table<?> name) {
        return new ReportJob(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportJob where(Condition condition) {
        return new ReportJob(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportJob where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportJob where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportJob where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportJob where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportJob where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportJob where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReportJob where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportJob whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReportJob whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
