/*
 * This file is generated by jOOQ.
 */
package com.cloud.nest.db.fm.tables;


import com.cloud.nest.db.fm.Fm;
import com.cloud.nest.db.fm.Indexes;
import com.cloud.nest.db.fm.Keys;
import com.cloud.nest.db.fm.tables.records.SharedFileRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SharedFile extends TableImpl<SharedFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fm.shared_file</code>
     */
    public static final SharedFile SHARED_FILE = new SharedFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SharedFileRecord> getRecordType() {
        return SharedFileRecord.class;
    }

    /**
     * The column <code>fm.shared_file.id</code>.
     */
    public final TableField<SharedFileRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>fm.shared_file.file_id</code>.
     */
    public final TableField<SharedFileRecord, Long> FILE_ID = createField(DSL.name("file_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>fm.shared_file.downloads</code>.
     */
    public final TableField<SharedFileRecord, Integer> DOWNLOADS = createField(DSL.name("downloads"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fm.shared_file.password</code>.
     */
    public final TableField<SharedFileRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>fm.shared_file.expires_at</code>.
     */
    public final TableField<SharedFileRecord, LocalDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>fm.shared_file.created</code>.
     */
    public final TableField<SharedFileRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>fm.shared_file.updated</code>.
     */
    public final TableField<SharedFileRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private SharedFile(Name alias, Table<SharedFileRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SharedFile(Name alias, Table<SharedFileRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>fm.shared_file</code> table reference
     */
    public SharedFile(String alias) {
        this(DSL.name(alias), SHARED_FILE);
    }

    /**
     * Create an aliased <code>fm.shared_file</code> table reference
     */
    public SharedFile(Name alias) {
        this(alias, SHARED_FILE);
    }

    /**
     * Create a <code>fm.shared_file</code> table reference
     */
    public SharedFile() {
        this(DSL.name("shared_file"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fm.FM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SHARED_FILE_FILE_ID_IDX);
    }

    @Override
    public UniqueKey<SharedFileRecord> getPrimaryKey() {
        return Keys.SHARED_FILE_ID_PKEY;
    }

    @Override
    public SharedFile as(String alias) {
        return new SharedFile(DSL.name(alias), this);
    }

    @Override
    public SharedFile as(Name alias) {
        return new SharedFile(alias, this);
    }

    @Override
    public SharedFile as(Table<?> alias) {
        return new SharedFile(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedFile rename(String name) {
        return new SharedFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedFile rename(Name name) {
        return new SharedFile(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedFile rename(Table<?> name) {
        return new SharedFile(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedFile where(Condition condition) {
        return new SharedFile(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedFile where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedFile where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedFile where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SharedFile where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SharedFile where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SharedFile where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SharedFile where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedFile whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedFile whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
